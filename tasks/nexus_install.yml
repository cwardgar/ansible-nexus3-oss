---
- name: Set Nexus version.
  set_fact:
    # We're doing a multi-line YAML string using the "Flow" scalar style
    # (see https://stackoverflow.com/a/21699210/3874643). It creates one long line, converting newlines to spaces.
    # Unfortunately, that results in leading and trailing spaces in the variable value. We strip those with the
    # minus signs in the statement delimiters. See https://stackoverflow.com/a/31062060/3874643.
    nexus_version: "{%- if installed_nexus_version is defined -%}
                      {{ installed_nexus_version }}
                    {%- elif nexus_version == 'latest' -%}
                      {{ latest_nexus_version }}
                    {%- else -%}
                      {{ nexus_version }}
                    {%- endif -%}"

- name: Ensure Nexus o/s group exists
  group:
    name: "{{ nexus_os_group }}"
    state: present

- name: Ensure Nexus o/s user exists
  user:
    name: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    shell: "/bin/bash"
    state: present

- name: Ensure Nexus installation directory exists
  file:
    path: "{{ nexus_installation_dir }}"
    state: "directory"

- name: Download and unpack Nexus
  unarchive:
    src: "http://download.sonatype.com/nexus/3/{{ nexus_package }}"
    dest: "{{ nexus_installation_dir }}"
    creates: "{{ nexus_home_dir }}"
    remote_src: yes

- name: Get status of default data directory
  stat:
    path: "{{ sonatype_work_dir }}"
  register: sonatype_work_dir_stat

- name: move data directory
  block:
    # As of ansible 2.3.0.0, there's no better way to recursively copy files when both src and dest are on the
    # remote machine. See https://stackoverflow.com/questions/25576871
  - name: Copy default data directory to nexus_data_dir and change ownership.
    command: >  # YAML multi-line, folded string. See https://stackoverflow.com/a/3790497/3874643
      rsync --archive --verbose --ignore-existing --chown={{ nexus_os_user }}:{{ nexus_os_group }}
      {{ sonatype_work_dir }}/nexus3/ {{ nexus_data_dir }}

  - name: Delete default data directory.
    file:
      path: "{{ sonatype_work_dir }}"
      state: absent
  when: sonatype_work_dir_stat.stat.exists   # default data directory hasn't been moved yet

- name: Create Nexus tmp, backup, and etc-override directories
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
  with_items:
  - "{{ nexus_data_dir }}/etc"  # Will create "nexus.properties" in this directory.
  - "{{ nexus_tmp_dir }}"       # Appears in nexus.vmoptions.
  - "{{ nexus_backup_dir }}"    # Database backups go here.

- name: Set application properties
  template:
    src: nexus.properties
    dest: "{{ nexus_data_dir }}/etc/nexus.properties"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
  notify: restart nexus

- name: Set Nexus VM options
  template:
    src: nexus.vmoptions
    dest: "{{ nexus_home_dir }}/bin/nexus.vmoptions"
  notify: restart nexus

# See https://books.sonatype.com/nexus-book/reference3/install.html#service-linux
- name: Install Nexus as a service
  block:
    # I'm not sure if we even need to do this, but it's part of the installation instructions.
    # This doesn't set NEXUS_HOME for the current session. Is that okay? Should we source the file?
    - name: Set NEXUS_HOME for the service user
      lineinfile:
        path: "/home/{{ nexus_os_user }}/.bashrc"
        regexp: "^export NEXUS_HOME=.*"
        line: "export NEXUS_HOME={{ nexus_home_dir }}"
      notify: restart nexus

    - name: Set Nexus user
      template:
        src: nexus.rc
        dest: "{{ nexus_home_dir }}/bin/nexus.rc"
      notify: restart nexus

    - name: Create systemd service configuration
      template:
        src: "nexus.service"
        dest: "/etc/systemd/system"
      notify: restart nexus

- name: Finish installation of Nexus service, enable it, and start it
  systemd: name=nexus daemon_reload=yes enabled=yes state=started

# Ordinarily, handlers run at the end of a play. However, we need our 'restart nexus' handler to run sooner
# because subsequent tasks access Nexus using its REST API, and they may depend on Nexus being configured with the
# updated values.
# In order for 'restart nexus' to work, I think the Nexus service needs to be installed, which the last task performs.
- name: Run 'restart nexus' handler, if necessary, before accessing REST API.
  meta: flush_handlers

- name: Wait for Nexus to be ready. Could take over a minute on Docker.
  wait_for: "port={{ nexus_default_port }}"
